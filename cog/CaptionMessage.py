# automatically generated by the FlatBuffers compiler, do not modify

# namespace: cog

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CaptionMessage(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CaptionMessage()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCaptionMessage(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CaptionMessage
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CaptionMessage
    def Text(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CaptionMessage
    def SpeakerId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CaptionMessage
    def FocusedId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CaptionMessage
    def MessageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CaptionMessage
    def ChunkId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def CaptionMessageStart(builder): builder.StartObject(5)
def Start(builder):
    return CaptionMessageStart(builder)
def CaptionMessageAddText(builder, text): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(text), 0)
def AddText(builder, text):
    return CaptionMessageAddText(builder, text)
def CaptionMessageAddSpeakerId(builder, speakerId): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(speakerId), 0)
def AddSpeakerId(builder, speakerId):
    return CaptionMessageAddSpeakerId(builder, speakerId)
def CaptionMessageAddFocusedId(builder, focusedId): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(focusedId), 0)
def AddFocusedId(builder, focusedId):
    return CaptionMessageAddFocusedId(builder, focusedId)
def CaptionMessageAddMessageId(builder, messageId): builder.PrependInt32Slot(3, messageId, 0)
def AddMessageId(builder, messageId):
    return CaptionMessageAddMessageId(builder, messageId)
def CaptionMessageAddChunkId(builder, chunkId): builder.PrependInt32Slot(4, chunkId, 0)
def AddChunkId(builder, chunkId):
    return CaptionMessageAddChunkId(builder, chunkId)
def CaptionMessageEnd(builder): return builder.EndObject()
def End(builder):
    return CaptionMessageEnd(builder)